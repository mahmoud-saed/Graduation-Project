# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oMIWeEfARYybZTBq0dXRC5aFik5AkSfc
"""

from keras.models import load_model

best_model=load_model('/content/best_model.h5')

import tensorflow as tf
tf.compat.v1.disable_eager_execution()

from keras.applications.imagenet_utils import preprocess_input
import copy
from keras import backend as K
import cv2
import matplotlib.pyplot as plt


def superimpose(img, cam):
    """superimpose original image and cam heatmap"""
    
    heatmap = cv2.resize(cam, (img.shape[1], img.shape[0]))
    heatmap = np.uint8(255 * heatmap)
    heatmap = cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)

    superimposed_img = heatmap * .5 + img * .5
    superimposed_img = np.minimum(superimposed_img, 255.0).astype(np.uint8)  # scale 0 to 255  
    superimposed_img = cv2.cvtColor(superimposed_img, cv2.COLOR_BGR2RGB)
    
    return img, heatmap, superimposed_img

classes=classes = {4: ('nv', ' melanocytic nevi'), 6: ('mel', 'melanoma'), 2 :('bkl', 'benign keratosis-like lesions'), 1:('bcc' , ' basal cell carcinoma'), 5: ('vasc', ' pyogenic granulomas and hemorrhage'), 0: ('akiec', 'Actinic keratoses and intraepithelial carcinomae'),  3: ('df', 'dermatofibroma')}


def getcode(n) : 
    for x , y in classes.items() : 
        if n == x : 
            return y

def _plot(best_model, cam_func, img):
    """plot original image, heatmap from cam and superimpose image"""
    
    # for cam
    x = img.reshape(1,28,28,3)
#     x = preprocess_input(copy.deepcopy(x))

    # for superimpose
    img = np.uint8(img)

    # cam / superimpose
    cls_pred, cam = cam_func(best_model=best_model, x=x, layer_name=best_model.layers[-1].name)
    img, heatmap, superimposed_img = superimpose(img, cam)

    fig, axs = plt.subplots(ncols=3, figsize=(9, 4))

    axs[0].imshow(img)
    axs[0].set_title('original image')
    axs[0].axis('off')

    axs[1].imshow(heatmap)
    axs[1].set_title('heatmap')
    axs[1].axis('off')

    axs[2].imshow(superimposed_img)
    axs[2].set_title('superimposed image')
    axs[2].axis('off')

    


    plt.suptitle('Predicted label : ' + str(getcode(cls_pred)))
    plt.tight_layout()
    plt.show()

## Grad-CAM function

def grad_cam(best_model, x, layer_name):
    """Grad-CAM function"""
    
    cls = np.argmax(best_model.predict(x))
    
    y_c = best_model.output[0, cls]
    conv_output = best_model.get_layer(layer_name).output
    grads = K.gradients(y_c, conv_output)[0]

    # Get outputs and grads
    gradient_function = K.function([best_model.input], [conv_output, grads])
    output, grads_val = gradient_function([x])
    output, grads_val = output[0, :], grads_val[0, :]
    
    weights = np.mean(grads_val) # Passing through GlobalAveragePooling

    cam = np.dot(output, weights) # multiply
    cam = np.maximum(cam, 0)      # Passing through ReLU
    cam /= np.max(cam)            # scale 0 to 1.0

    return cls, cam

import matplotlib.pyplot as plt

path = r'/content/color_img.jpg'
img=plt.imread(path)

from tensorflow.keras.applications import VGG16
from tensorflow.keras import backend as K

_plot(best_model=best_model, cam_func=grad_cam, img=img)